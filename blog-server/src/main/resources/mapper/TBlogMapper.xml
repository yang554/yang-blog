<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yang.blog.mapper.TBlogMapper">
    <resultMap id="map" type="com.yang.blog.entity.TBlogEntity">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="cover" property="cover"/>
        <result column="content" property="content"/>
        <result column="isoriginal" property="isoriginal"/>
        <result column="ispublic" property="ispublic"/>
        <result column="iscomment" property="iscomment"/>
        <result column="create_time" property="createTime"/>
        <result column="browsecount" property="browsecount"/>
        <result column="likes" property="likes"/>
        <result column="collection" property="collection"/>
        <result column="issue" property="issue"/>
        <result column="updtime" property="updtime"/>
        <result column="createtime" property="createtime"/>
        <result column="typeid" property="typeid"/>
        <result column="userid" property="userid"/>
        <result column="tagjson" property="tagjson"/>
        <result column="isdel" property="isdel"/>
        <result column="note" property="note"/>
        <result column="data" property="data"/>

        <result column="uName" property="uName"/>
        <result column="uNickname" property="uNickname"/>
        <result column="tName" property="tName"/>
    </resultMap>

    <select id="getBlogByPage" resultType="map" parameterType="com.yang.blog.entity.TBlogEntity">
        SELECT
        b.`id` AS bid,b.`title`,b.`description`,b.`cover`,b.`isoriginal`,
        b.content,b.`ispublic`,b.`iscomment`,b.`issue`,b.`browsecount`,b.`likes`,
        b.`collection`,b.`typeid`,b.`userid`,b.`tagjson`,b.`isdel`,b.`createtime`,
        b.`updtime`,u.`id` AS uid,u.`username` AS uName,u.`nickname` AS uNickname,
        u.`avatar`,u.`email`,u.`description`,t.id,t.`name`AS tName,t.note
        FROM
        t_blog b
        LEFT JOIN sys_user u
        ON b.`userid` = u.`id`
        LEFT JOIN t_type t
        ON t.id = b.typeid
        <where>
            <if test="ispublic != null">
                and b.`ispublic` = #{ispublic,jdbcType=VARCHAR}
            </if>
            <if test="isoriginal != null ">
                and b.`isoriginal` = #{isoriginal,jdbcType=VARCHAR}
            </if>
            <if test="issue != null ">
                and b.`issue` = #{issue,jdbcType=VARCHAR}
            </if>
            <if test="isdel != null ">
                and b.`isdel` = #{isdel,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY b.`createtime` DESC
    </select>

    <select id="getBlogByPageTitle" resultType="map" parameterType="com.yang.blog.entity.TBlogEntity">
        SELECT
        b.`id` AS bid,b.`title`,b.`description`,b.`cover`,b.`isoriginal`,
        b.content,b.`ispublic`,b.`iscomment`,b.`issue`,b.`browsecount`,b.`likes`,
        b.`collection`,b.`typeid`,b.`userid`,b.`tagjson`,b.`isdel`,b.`createtime`,
        b.`updtime`,u.`id` AS uid,u.`username` AS uName,u.`nickname` AS uNickname,
        u.`avatar`,u.`email`,u.`description`,t.id,t.`name`AS tName,t.note
        FROM
        t_blog b
        LEFT JOIN sys_user u
        ON b.`userid` = u.`id`
        LEFT JOIN t_type t
        ON t.id = b.typeid
        <where>
            <if test="ispublic != null">
                and b.`ispublic` = #{ispublic,jdbcType=VARCHAR}
            </if>
            <if test="isoriginal != null ">
                and b.`isoriginal` = #{isoriginal,jdbcType=VARCHAR}
            </if>
            <if test="issue != null ">
                and b.`issue` = #{issue,jdbcType=VARCHAR}
            </if>
            <if test="isdel != null ">
                and b.`isdel` = #{isdel,jdbcType=VARCHAR}
            </if>
            <if test="title != null ">
                and b.`title` LIKE CONCAT('%',#{title},'%')
            </if>
        </where>
        ORDER BY b.`createtime` DESC
    </select>

    <select id="getBlogByID" resultType="com.yang.blog.entity.TBlogEntity">
        SELECT
        b.`id` AS bid,
        b.`title`,
        b.`description`,
        b.`cover`,
        b.`isoriginal`,
        b.content,
        b.`ispublic`,
        b.`iscomment`,
        b.`issue`,
        b.`browsecount`,
        b.`likes`,
        b.`collection`,
        b.`typeid`,
        b.`userid`,
        b.`tagjson`,
        b.`isdel`,
        b.`createtime`,
        b.`updtime`,
        u.`id` AS uid,
        u.`username` AS uName,
        u.`nickname` AS uNickname,
        u.`avatar`,
        u.`email`,
        u.`description`,
        t.id,
        t.`name`AS tName,
        t.note
        FROM
        t_blog b
        LEFT JOIN sys_user u
        ON b.`userid` = u.`id`
        LEFT JOIN t_type t
        ON t.id = b.typeid
        WHERE b.id = #{bID}
    </select>

    <insert id="addBlog" parameterType="com.yang.blog.entity.TBlogEntity">
        INSERT INTO t_blog (id,title,description,content,cover,isoriginal,ispublic,iscomment,issue,typeid,userid,tagjson,createtime)
        VALUES (#{id,jdbcType=VARCHAR},#{title,jdbcType=VARCHAR},#{description,jdbcType=VARCHAR},#{content,jdbcType=VARCHAR}
        ,#{cover,jdbcType=VARCHAR},#{isoriginal,jdbcType=VARCHAR},#{ispublic,jdbcType=VARCHAR},#{iscomment,jdbcType=VARCHAR}
        ,#{issue,jdbcType=VARCHAR},#{typeid,jdbcType=VARCHAR},#{userid,jdbcType=VARCHAR},#{tagjson,jdbcType=VARCHAR}
        ,#{createtime,jdbcType=VARCHAR})
    </insert>

    <update id="saveBlog" parameterType="com.yang.blog.entity.TBlogEntity">
        UPDATE t_blog SET title = #{title,jdbcType=VARCHAR},description = #{description},content = #{content},cover = #{cover},
          isoriginal = #{isoriginal},ispublic = #{ispublic},iscomment = #{iscomment},issue = #{issue},typeid = #{typeid},tagjson = #{tagjson},
          updtime = #{updtime}
        WHERE id = #{id}
    </update>

    <update id="saveBlogCover" >
        UPDATE t_blog SET cover=#{cover} WHERE id=#{id}
    </update>

    <update id="delBlogH" >
        UPDATE t_blog SET isdel = #{isdel} WHERE id = #{bID}
    </update>

    <delete id="delBlog" >
        DELETE FROM t_blog WHERE id = #{bID}
    </delete>
</mapper>